<?xml version="1.0" encoding="UTF-8"?>
<project name="deployment" default="deploy" basedir=".">
	<taskdef name="ls" classname="tasks.Ls" />
	<taskdef name="initDir" classname="tasks.InitDir" />
	<taskdef name="compressor" classname="tasks.KpMinTask" />
	<taskdef name="preprocessConfig" classname="tasks.PreprocessConfig" />
	
	<target name="setenv">
		<property file="./deploy.ini" /> 
		
		<if>
			<isSet property="settings.config.secure" />
			<then>
				<property file="${settings.config.secure}" /> 
			</then>
		</if>
		
		<echo msg="${host.name}" />
	</target>

	<target name="deploy" depends="setenv">
		<echo msg="${settings.scm.type}" />
		
		<tstamp>
			<format property="build.code" pattern="%Y%m%d_%H%M%S"/>
		</tstamp>
		
		<property name="dirs.install" value="${settings.dirs.releases}/${build.code}" /> 
		<property name="dirs.shared" value="${settings.directory}/shared" />
		<property name="dirs.repository" value="${settings.directory}/repository" />
		
		<initDir dir="${settings.dirs.releases}" />
		
		<echo msg="Vytvářím adresář ${dirs.install}" />
		
		<mkdir dir="${dirs.install}" />
		
		<!-- <phingcall target="tag" />-->
		
		<available file="${dirs.repository}" property="repository_exists" value="true"/>
		
		<if>
		 <equals arg1="${settings.scm.type}" arg2="subversion" />
		 <then>
			<if>
				<equals arg1="${repository_exists}" arg2="1" />
				<then>
					<svnupdate
					   svnpath="${settings.scm.binary}"
					   username="${settings.scm.username}"
					   password="${settings.scm.password}"
					   nocache="true"
					   todir="${dirs.repository}"/>
				</then>
				<else>
					<mkdir dir="${dirs.repository}" />
					<svncheckout
					   svnpath="${settings.scm.binary}"
					   username="${settings.scm.username}"
					   password="${settings.scm.password}"
					   force="true"
					   nocache="true"
					   repositoryurl="${settings.scm.protocol}://${settings.scm.url}/${settings.scm.branch}"
					   todir="${dirs.repository}"/>
				</else>
			</if>
			
			<exec command="cp -r ${dirs.repository}/ ${dirs.install}" />
		 </then>
		</if>
		
		<if>
		 <equals arg1="${settings.scm.type}" arg2="git" />
		 <then>
			<resolvepath propertyName="repo.dir.resolved" file="${dirs.install}" />		
			<exec command="${settings.scm.binary} clone ${settings.scm.protocol}://${settings.scm.username}:${settings.scm.password}@${settings.scm.url} ${repo.dir.resolved}" />
			<exec command="${settings.scm.binary} checkout ${settings.scm.branch} ${repo.dir.resolved}" />
		 </then>
		</if>
				
		<foreach list="${settings.dirs.shared}" param="folder" target="symlinkShared" />
		
		<foreach list="${settings.dirs.cache}" param="folder" target="clearCache" />
		
		<foreach list="${settings.minify.js}" param="folder" target="minifyJavascript" />
		
		<phingcall target="secureConfig" />
		
		<delete file="${dirs.public}" />
		<symlink target="${dirs.install}" link="${dirs.public}" />
		
		<!--
		<phingcall target="migrateDb" />
		-->
	</target>
	
	<target name="symlinkShared">
		<echo msg="Vytvářím symlink adresáře ${dirs.shared}/${folder} do ${dirs.install}/${folder}" />
		
		<resolvepath propertyName="sharedFolder" file="${dirs.shared}/${folder}"/>
		<symlink target="${sharedFolder}" link="${dirs.install}/${folder}" />
	</target>
	
	<target name="clearCache">
		<echo msg="Mažu obsah složky ${dirs.install}/${folder}" />
		
		<delete dir="${dirs.install}/${folder}" includeemptydirs="true" verbose="true" />
		<mkdir dir="${dirs.install}/${folder}" />
		<chmod file="${dirs.install}/${folder}" mode="0777" />
	</target>
	
	<target name="minifyJavascript">
		<echo msg="Minifikuji javascriptové soubory v ${dirs.install}/${folder}" />
		
		<compressor targetDir="${dirs.install}/${folder}"
		              yuiPath="${settings.tools.yuicompressor}">
        			<fileset dir="${dirs.install}/${folder}">
        		<include name="*.js"/>
			</fileset>
		</compressor>
	</target>
	
	<target name="migrateDb" depends="setenv">
		<dbdeploy
		  url="mysql:host=${settings.db.host};dbname=${settings.db.name};unix_socket=${settings.db.socket}"
		  userid="${settings.db.user}"
		  password="${settings.db.password}"
		  dir="${dirs.public}/${settings.db.deltas}"
		  outputfile="${dirs.public}/${settings.db.deltas}/all-deltas.sql"    
		  undooutputfile="${dirs.public}/${settings.db.deltas}/undo-all-deltas.sql"
		/>
	</target>
	
	<target name="upgradeDb" depends="migrateDb">
		
		<exec command="${settings.db.binary} -h ${settings.db.host} -u ${settings.db.user} ${settings.db.name} &lt; ${dirs.public}/${settings.db.deltas}/all-deltas.sql" checkreturn="true" />    
		
	</target>
	
	<target name="tag">		
		<if>
			<isSet property="build.code" />
			<then>
				<if>
				 <equals arg1="${settings.scm.type}" arg2="subversion" />
				 <then>
					<svncopy
					   svnpath="${settings.scm.binary}"
					   username="${settings.scm.username}"
					   password="${settings.scm.password}"
					   force="true"
					   nocache="true"
					   repositoryurl="${settings.scm.protocol}://${settings.scm.url}/${settings.scm.branch}"
					   todir="${settings.scm.protocol}://${settings.scm.url}/tags/${build.code}"/>
				 </then>
				</if>

				<if>
				 <equals arg1="${settings.scm.type}" arg2="git" />
				 <then>
					<resolvepath propertyName="repo.dir.resolved" file="${dirs.install}" />		
					
					<gittag repository="${repo.dir.resolved}"
					        name="ver2.0" delete="true" />
				 </then>
				</if>
			</then>
		</if>
	</target>
	
	<target name="downgradeDb" depends="setenv">
		
		<exec command="${settings.db.binary} -h ${settings.db.host} -u ${settings.db.user} ${settings.db.name} &lt; ${dirs.public}/${settings.db.deltas}/undo-all-deltas.sql" checkreturn="true" />    
		
	</target>
	
	<target name="releases" depends="setenv">
		
		<ls dir="${settings.dirs.releases}" />
		
	</target>

	<target name="rollback" depends="setenv">
		
	</target>
	
	<target name="secureConfig" depends="setenv">
		<resolvepath propertyName="config.secure.resolved" file="${settings.config.secure}" />		
		<preprocessConfig config="${config.secure.resolved}">
			<fileset dir="${dirs.install}" id="configFiles">
				<include name="**/*.ini" />
			</fileset>
		</preprocessConfig>
	</target>
</project>
